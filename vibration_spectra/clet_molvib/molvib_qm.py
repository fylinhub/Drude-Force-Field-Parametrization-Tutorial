#!/usr/bin/python
import sys, re, os
## Fang-Yu updated, March 2017

#####################################################################
# Author: Xibing He                                                 #
# Created: 09/30/2010                                               #
# Latest modified: 02/18/2011                                       #
# E-mail: xibing@outerbanks.umaryland.edu                           #
# ###################################################################

# ###################################################################
# Purpose: Construct a *_molvib_qm.inp file which can do the MOLVIB #
#          analysis of Gaussian second derivatives.                 #
# ###################################################################

# ###################################################################
# Users please cite the following paper:                            #
# Xibing He, Pedro E. M. Lopes and Alexander D. MacKerell, Jr.      #
# Polarizable Empirical Force Field for Acyclic Poly-Alcohols Based #
# on the Classical Drude Oscillator.                                #
# Submitted to Biopolymers, 2013                                    #
# ###################################################################

# fylin inserted the atom information 
dic_masses = {'H':1.0079, 'C':12.0107, 'N':14.00700, 'O':15.99940, 'S':32.0600, 'CL':35.45320, 'F':18.99800, 'BR':79.90400, 'I':126.90447}
dict_masses = {'1':1.0079, '6':12.0107, '7':14.00700, '8':15.99940, '16':32.0600, '17':35.45320, '9':18.99800, '35':79.90400, '53':126.90447}

#print sys.argv
if len(sys.argv) < 2:
   print "Purpose: Construct a <residue>_molvib_qm.inp file which can do the MOLVIB analysis of Gaussian second derivatives."
   print "Usage 1: ./molvib_qm.py <residue>"
   print "Example 1: ./molvib_qm.py meso"
   print "Caution 1: (1.1) The working directory should be <residue>/gauss/, where the file '<residue>_opt_freq_mp2.log' exists."
   print "           (1.2) The parent directory should have a file 'molvib_mm.str', which can be generated by another script molvib_mm.py"
   print "Usage 2: ./molvib_qm.py <residue> <molvib_mm.str> <G03.log> <resid_molvib_qm.inp>"
   sys.exit()
elif len(sys.argv) == 2:
   residue = sys.argv[1]
   print "Residue name: %s"%residue
   file1 = "./molvib_mm.str"               ## fylin updated the location
   file2 = residue+"_water_mp2.xyz"        ## fylin updated the name
   file3 = "%s_opt_freq_mp2.log"%residue
   out_file = "./%s_molvib_qm.inp"%residue ## fylin updated the location
elif len(sys.argv) == 5:
   residue = sys.argv[1]
   print "Residue name: %s"%residue
   file1 = sys.argv[2]
   file3 = sys.argv[3]
   out_file = sys.argv[4]
else:
   print "***** Error: number of arguments must be either 1 or 4"
   raise SystemExit

out = open(out_file, "w")

out.write("* MOLVIB analysis of Gaussian second derivatives\n")
out.write("* 0.971288 scale factor should be applied to the MP2/6-31G* vibrational modes\n")
out.write("*\n\nset id1 1\nbomlev -1\nfaster 1\n\n")

# open the ../molvib_mm.str file
if os.path.exists(file1):
   print "Open file %s"%file1
   inp1 = open (file1, "r")
else:
   print "****Error: file %s does not exist."%file1
   sys.exit(-1)
txt1 = inp1.read()
inp1.close()

begin1 = "SECO\n"
middle1 = "IC\n"
end1 = "END\n"
s11 = txt1.find(begin1, 0)
if s11 < 0:
   print "Cannot find \"SECO\\n\" in file %s"%file1
   sys.exit()
s12 = txt1.find(middle1, s11)
if s12 < 0:
   print "Cannot find \"IC\\n\" in file %s"%file1
   sys.exit()
s13 = txt1.find(end1, s11)
if s13 < 0:
   print "Cannot find \"END\\n\" in file %s"%file1
   sys.exit()
out.write(txt1[:s11])

# Open the <resi>_opt_freq_mp2.log file
if os.path.exists(file3):
   print "Open file %s"%file3
   inp3 = open (file3, "r")
else:
   print "****Error: file %s does not exist."%file3
   sys.exit(-1)
txt3 = inp3.read()
inp3.close()

s21 = txt3.rfind("Input orientation:")
if s21 < 0:
   print "Cannot find \"Input orientation:\" in file %s"%file3
   sys.exit()
s22 = txt3.rfind("Distance matrix (angstroms)")
if s22 < 0:
   print "Cannot find \"Distance matrix (angstroms)\" in file %s"%file3
   sys.exit()
if s21 > s22:
   print "Error: last \"Input orientation:\" is not before last \"Distance matrix (angstroms)\" in file %s"%file3
   sys.exit()
lines = txt3[s21:s22].split("\n")
n_atoms = len(lines[5:-2])
out.write(" NATOM %3d  NOTO\n"%n_atoms)
out.write(txt1[s11+5:s12])
out.write("CART\n")
for line in lines[5:-2]:
   words = line.split()
   atom_number = words[1]
   if not (atom_number in dict_masses):
      print "****Error: the atom number %s is not pre-given in the dict_masses. Modify the script."%atom_number
      sys.exit()
   x = words[3]
   y = words[4]
   z = words[5]
   new_line = "%11s %11s %11s %9.4f\n"%(x, y, z, dict_masses[atom_number])
   out.write(new_line)


out.write(txt1[s12:s13])

begin3 = " Force constants in Cartesian coordinates:"
end3 = "\n Cartesian forces in FCRed:"
end4 = "\n FCInt: Cartesian first derivatives:"
s31 = txt3.find(begin3, 0)
if s31 < 0:
   print "Cannot find \" Force constants in Cartesian coordinates:\" in file %s"%file3
   sys.exit()
s32 = txt3.find(end3, s31)
if s32 < 0: s32 = txt3.find(end4, s31)
if s32 < 0:
   print "Cannot find \" Cartesian forces in FCRed:\"  or \" FCInt: Cartesian first derivatives:\" in file %s"%file3
   sys.exit()
out.write("FMAT     1    1    0          ! Gaussian FX matrix\n")
lines = txt3[s31:s32].split("\n")
out.write(lines[0]+"\n")
for line in lines[1:]:
   out.write(line[4:]+"\n")

out.write("SCALE\n 0.9434\nEND\n\nstop\n")
print "File %s has been generated :)"%out_file
print "Check the scaling factor of QM vibrational frequency"
out.close()
